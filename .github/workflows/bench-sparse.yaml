name: Bench Sparse

on:
  workflow_dispatch:

env:
  JULIA_CACHE: '1'
  JULIA_NUM_THREADS: 'auto'
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 5
  DF: 'Sparse Matrix Manipulation'
jobs:
  Julia:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f src/sparse-sgd/python/requirements.txt ]; then pip install -r src/sparse-sgd/python/requirements.txt; fi
      - name: Setup Julia
        uses: julia-actions/setup-julia@v1
        with:
          version: '1.10.0'
      - name: Cache Julia dependencies
        uses: actions/cache@v4
        if: ${{ env.JULIA_CACHE != '0'}}
        with:
          path: ~/.julia
          key: ${{ runner.os }}-julia-${{ env.JULIA_CACHE }}-${{ hashFiles('**/Manifest.toml') }}
      - name: Install Julia dependencies
        env:
          JULIA_PROJECT: ${{ github.workspace }}
        run: julia --color=yes -e 'import Pkg; Pkg.add("BenchmarkTools"); Pkg.add("JSON"); Pkg.add("PyCall"); Pkg.add("SparseArrays"); Pkg.instantiate(); Pkg.resolve(); Pkg.precompile()'
      - name: Julia Run
        env:
          JULIA_PROJECT: ${{ github.workspace }}
        run: |
          cd data && unzip df_csr.zip
          cd ../src/sparse-sgd/julia && julia --project bench.jl
      - name: Upload Bench
        uses: actions/upload-artifact@v4
        with:
          name: report-jl
          path: src/sparse-sgd/julia/bench.jl.json
  Python:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f src/sparse-sgd/python/requirements.txt ]; then pip install -r src/sparse-sgd/python/requirements.txt; fi
        cp src/report.py ~/report.py
    - name: Python Run
      run: |
        cd data && unzip df_csr.zip && cd ..
        pytest src/sparse-sgd/python/bench.py --benchmark-json ~/bench.py.json
    - name: Cython Run
      run: |
        pip install Cython; pip install setuptools
        cd src/sparse-sgd/cython
        python cython_setup.py build_ext --inplace
        python -m timeit -r 1 "import bench, timeit" "r = timeit.repeat(stmt='bench.sgd_V(X, total_losses, cross_terms, V, delta_V)', setup='import bench; X, total_losses, cross_terms, V, delta_V = bench.setup()', repeat=20, number=1)" "import statistics; print('{\"max_s\":'+str(max(r))+',\"med_s\":'+str(statistics.median(r))+',\"mean_s\":'+str(statistics.mean(r))+',\"min_s\":'+str(min(r))+'}')" > ~/bench.cy.json
    - name: Upload Bench
      uses: actions/upload-artifact@v4
      with:
        name: report-pycy
        path: |
            ~/bench.py.json
            ~/bench.cy.json
            ~/report.py
  CSharp:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0.x'
      - uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
      - name: CSharp Run
        run: |
          cd data && unzip coo.zip && cd ../src/sparse-sgd/csharp
          dotnet run -- --exporters json --filter *sgd
          find BenchmarkDotNet.Artifacts -type f -name *compressed.json -exec cp -v {} ~/bench.cs.json \;	
      - name: Upload Bench
        uses: actions/upload-artifact@v4
        with:
          name: report-cs
          path: ~/bench.cs.json
  Cpp:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4
        - name: Install C++ dependencies
          run: |
            sudo apt install g++
            sudo apt install libboost-all-dev
        - name: C++ Build and Run
          run: |
            cd data && unzip -o '*csv*.zip'  -d .
            cd ../src/sparse-sgd/cpp && cmake -B gnu .
            cd gnu && make
            ./sparse-sgd --trials 5 > ~/bench.cpp.json
        - name: Upload Bench
          uses: actions/upload-artifact@v4
          with:
            name: report-cpp
            path: ~/bench.cpp.json
  Merge:
    runs-on: ubuntu-latest
    needs: [Python,Julia,CSharp,Cpp]
    steps:
      - name: Merge
        uses: actions/upload-artifact/merge@v4
        with:
          name: report
          pattern: report-*
          delete-merged: true
  Report:
    runs-on: ubuntu-latest
    needs: Merge
    steps:
    - name: Download bench artifacts
      uses: actions/download-artifact@v4
    - name: Display structure of downloaded files
      run: ls -R
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas matplotlib seaborn
    - name: Generate report
      run: |
        cd report && python report.py
        echo "### Bench complete :rocket:" >> $GITHUB_STEP_SUMMARY
        while IFS= read -r line; do echo "$line" >> $GITHUB_STEP_SUMMARY ; done < report.md
    - name: Upload Report
      uses: actions/upload-artifact@v4
      with:
        name: report-all
        path: |
          report/report.md
          report/report.png         
